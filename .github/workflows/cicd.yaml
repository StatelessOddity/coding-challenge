name: "CICD"
on:
  push:
    branches:
      - main
      - testing
permissions:
      id-token: write
      contents: read
      pull-requests: write
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_VAR_rdx_public_key: ${{ secrets.RDX_PUBLIC_KEY }}
  TF_VAR_rdx_private_key: ${{ secrets.RDX_PRIVATE_KEY }}
  TF_VAR_token_github: ${{ secrets.TOKEN_GITHUB }}
  TF_VAR_rdx_password: ${{ secrets.RDX_PASSWORD }}
  ANSIBLE_HOST_KEY_CHECKING: False
jobs:
  check_changes:
    name: Check Changes
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      terraform: ${{ steps.filter.outputs.terraform }}
      ansible: ${{ steps.filter.outputs.ansible }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          terraform:
            - 'terraform/**'
          ansible:
            - 'ansible/**'

  test_infrastructure:
    name: Test Infrastructure Code
    needs: check_changes
    if: ${{ (needs.check_changes.outputs.terraform == 'true') && (github.ref == 'refs/heads/testing') && (github.event_name == 'push') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7
      - name: Check Formatting
        id: fmt
        run: terraform fmt -check
        continue-on-error: false
      - name: Initialize Terraform
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
      - name: Validate Terraform Code
        id: validate
        run: terraform validate -no-color
      - name: Run Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: false
  
  test_configuration:
    name: Test Configuration Code
    needs: check_changes
    if: ${{ (needs.check_changes.outputs.ansible == 'true') && (github.ref == 'refs/heads/testing') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ansible
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Run ansible-lint
        uses: ansible/ansible-lint-action@main
  
  raise_pr:
    name: Pull Request to Main
    runs-on: ubuntu-latest
    needs: [test_infrastructure, test_configuration]
    if: | 
      always()
      && contains(needs.*.result, 'success')
      && contains(github.event.head_commit.message, 'pr')
      && !contains(needs.*.result, 'failure')
      && (github.ref == 'refs/heads/testing')
    steps:
      - uses: actions/checkout@v3
      - name: pull-request
        uses: repo-sync/pull-request@v2
        id: apr
        with:
          destination_branch: "main"
          pr_label: "automatic-pr"
          pr_title: "Automatic PR"
      - name: Approve Pull Request
        uses: juliangruber/approve-pull-request-action@v2.0.0
        if: contains(github.event.head_commit.message, 'pr-a')
        with:
          github-token: ${{ secrets.TOKEN_GITHUB }}
          number: ${{steps.apr.outputs.pr_number}}
      - name: Merge Pull Request
        uses: juliangruber/merge-pull-request-action@v1
        if: contains(github.event.head_commit.message, 'pr-am')
        with:
          github-token: ${{ secrets.TOKEN_GITHUB }}
          number: ${{steps.apr.outputs.pr_number}}
          method: squash
  
  infra_setup:
    name: Infrastructure
    needs: check_changes
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.7
      - name: Initialize Terraform
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"
      - name: Run Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - name: Check Terraform Plan
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Apply Terraform
        if: ${{ (github.ref == 'refs/heads/main') && (github.event_name == 'push') }}
        run: terraform apply -auto-approve -input=false
      - name: List files
        run: ls -R
      - uses: actions/upload-artifact@v3
        name: Upload Ansible inventory
        with:
          name: ansible-inventory
          path: ./terraform/hosts
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        name: Upload SSH Configuration
        with:
          name: ssh-configuration
          path: ./terraform/ssh.cfg
          if-no-files-found: error
  
  servers_configuration:
    name: Configuration
    needs: [check_changes, infra_setup]
    if: ${{ (needs.check_changes.outputs.ansible == 'true') && (github.ref == 'refs/heads/main') }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ansible
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f test-requirements.txt ]; then pip install -r test-requirements.txt; fi
      - uses: actions/download-artifact@v3
        name: Download Ansible inventory
        with:
          path: ./ansible
          name: ansible-inventory
      - uses: actions/download-artifact@v3
        name: Download SSH Configuration
        with:
          path: ./ansible
          name: ssh-configuration
      - name: Install private SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.RDX_PRIVATE_KEY }}
          name: id_rsa
          known_hosts: unnecessary # Figure out how to generate this for ec2s with TF, security101
          if_key_exists: fail
      - name: Deploy servers configuration
        run: |
          ls -la
          cat hosts
          ansible-playbook -i hosts -u ubuntu rdx-stack.yaml